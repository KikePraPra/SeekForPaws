/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StartImport } from './routes/start'
import { Route as ReportsImport } from './routes/reports'
import { Route as LoginImport } from './routes/login'
import { Route as ContactoImport } from './routes/contacto'
import { Route as AdoptionFormsImport } from './routes/adoptionForms'
import { Route as AdoptionImport } from './routes/adoption'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StartRoute = StartImport.update({
  id: '/start',
  path: '/start',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ContactoRoute = ContactoImport.update({
  id: '/contacto',
  path: '/contacto',
  getParentRoute: () => rootRoute,
} as any)

const AdoptionFormsRoute = AdoptionFormsImport.update({
  id: '/adoptionForms',
  path: '/adoptionForms',
  getParentRoute: () => rootRoute,
} as any)

const AdoptionRoute = AdoptionImport.update({
  id: '/adoption',
  path: '/adoption',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/adoption': {
      id: '/adoption'
      path: '/adoption'
      fullPath: '/adoption'
      preLoaderRoute: typeof AdoptionImport
      parentRoute: typeof rootRoute
    }
    '/adoptionForms': {
      id: '/adoptionForms'
      path: '/adoptionForms'
      fullPath: '/adoptionForms'
      preLoaderRoute: typeof AdoptionFormsImport
      parentRoute: typeof rootRoute
    }
    '/contacto': {
      id: '/contacto'
      path: '/contacto'
      fullPath: '/contacto'
      preLoaderRoute: typeof ContactoImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      id: '/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof StartImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/adoption': typeof AdoptionRoute
  '/adoptionForms': typeof AdoptionFormsRoute
  '/contacto': typeof ContactoRoute
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/start': typeof StartRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/adoption': typeof AdoptionRoute
  '/adoptionForms': typeof AdoptionFormsRoute
  '/contacto': typeof ContactoRoute
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/start': typeof StartRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/adoption': typeof AdoptionRoute
  '/adoptionForms': typeof AdoptionFormsRoute
  '/contacto': typeof ContactoRoute
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/start': typeof StartRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/adoption'
    | '/adoptionForms'
    | '/contacto'
    | '/login'
    | '/reports'
    | '/start'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/adoption'
    | '/adoptionForms'
    | '/contacto'
    | '/login'
    | '/reports'
    | '/start'
  id:
    | '__root__'
    | '/'
    | '/adoption'
    | '/adoptionForms'
    | '/contacto'
    | '/login'
    | '/reports'
    | '/start'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdoptionRoute: typeof AdoptionRoute
  AdoptionFormsRoute: typeof AdoptionFormsRoute
  ContactoRoute: typeof ContactoRoute
  LoginRoute: typeof LoginRoute
  ReportsRoute: typeof ReportsRoute
  StartRoute: typeof StartRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdoptionRoute: AdoptionRoute,
  AdoptionFormsRoute: AdoptionFormsRoute,
  ContactoRoute: ContactoRoute,
  LoginRoute: LoginRoute,
  ReportsRoute: ReportsRoute,
  StartRoute: StartRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/adoption",
        "/adoptionForms",
        "/contacto",
        "/login",
        "/reports",
        "/start"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/adoption": {
      "filePath": "adoption.tsx"
    },
    "/adoptionForms": {
      "filePath": "adoptionForms.tsx"
    },
    "/contacto": {
      "filePath": "contacto.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/reports": {
      "filePath": "reports.tsx"
    },
    "/start": {
      "filePath": "start.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
